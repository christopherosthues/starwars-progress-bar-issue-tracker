# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
    paths:
      - 'server/**'
      - '.github/workflows/dotnet.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'server/**'
      - '.github/workflows/dotnet.yml'
  workflow_dispatch:

env:
  HUSKY: 0.

jobs:
#  build:
#    name: Build .NET
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Setup .NET
#      uses: actions/setup-dotnet@v4
#      with:
#        dotnet-version: 9.x
#
#    - name: Restore dependencies
#      run: dotnet restore server/src/StarWarsProgressBarIssueTracker.sln
#
#    - name: Generate GitHub GraphQL client
#      run: dotnet build server/src/StarWarsProgressBarIssueTracker.Infrastructure.GitHub/StarWarsProgressBarIssueTracker.Infrastructure.GitHub.csproj
#
#    - name: Generate Gitlab GraphQL client
#      run: dotnet build server/src/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab.csproj
#
#    - name: Build
#      run: dotnet build server/src/StarWarsProgressBarIssueTracker.sln --no-restore

  sonarCloud:
    name: Analyze SonarCloud
#    needs: [ build ]
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Restore dependencies
        run: dotnet restore server/src/StarWarsProgressBarIssueTracker.sln

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Cache SonarQube Cloud dotCover
        id: cache-sonar-dotcover
        uses: actions/cache@v4
        with:
          path: .\.sonar\dotcover
          key: ${{ runner.os }}-sonar-dotcover
          restore-keys: ${{ runner.os }}-sonar-dotcover

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Install SonarQube Cloud dotCover
        if: steps.cache-sonar-dotcover.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\dotcover -ItemType Directory
          dotnet tool update JetBrains.dotCover.GlobalTool --tool-path .\.sonar\dotcover

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"christopherosthues_starwars-progress-bar-issue-tracker-server" /o:"christopherosthues" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html
          dotnet build server/src/StarWarsProgressBarIssueTracker.Infrastructure.GitHub/StarWarsProgressBarIssueTracker.Infrastructure.GitHub.csproj --no-restore
          dotnet build server/src/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab.csproj --no-restore
          dotnet build server/src/StarWarsProgressBarIssueTracker.sln --no-restore
          dir .\.sonar\dotcover\
          .\.sonar\dotcover\dotnet-dotcover test --dcReportType=HTML --dcAttributeFilters="StarWarsProgressBarIssueTracker.TestHelpers.ErrorAttribute" server/src/StarWarsProgressBarIssueTracker.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

#  tests:
#    name: Run .NET Tests
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      actions: read
#      checks: write
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Setup .NET
#      uses: actions/setup-dotnet@v4
#      with:
#        dotnet-version: 9.x
#
#    - name: Restore dependencies
#      run: dotnet restore server/src/StarWarsProgressBarIssueTracker.sln
#
#    - name: Generate GitHub GraphQL client
#      run: dotnet build server/src/StarWarsProgressBarIssueTracker.Infrastructure.GitHub/StarWarsProgressBarIssueTracker.Infrastructure.GitHub.csproj --no-restore
#
#    - name: Generate Gitlab GraphQL client
#      run: dotnet build server/src/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab.csproj --no-restore
#
#    - name: Build
#      run: dotnet build server/src/StarWarsProgressBarIssueTracker.sln --no-restore
#
#    - name: Test
#      run: dotnet test server/src/StarWarsProgressBarIssueTracker.sln --no-build --verbosity q --logger "trx" --results-directory "TestResults" --filter "TestCategory!=Error" --collect:"XPlat Code Coverage"
#
#    - name: Upload test results
#      uses: actions/upload-artifact@v4
#      with:
#        name: Test results
#        path: TestResults
#      if: ${{ always() }}
#
#    - name: Test Report
#      uses: dorny/test-reporter@v1.9.1
#      if: success() || failure()
#      with:
#        name: .NET Test results
#        path: TestResults/*.trx
#        reporter: dotnet-trx
#
#  strykerApp:
#    name: Stryker.NET App
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Setup .NET
#      uses: actions/setup-dotnet@v4
#      with:
#        dotnet-version: 9.x
#
#    - name: Restore dependencies
#      run: dotnet restore server/src/StarWarsProgressBarIssueTracker.sln
#
#    - name: Restore tools
#      run: dotnet tool restore
#
#    - name: Execute Stryker.NET
#      run: dotnet stryker
#      working-directory: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.App.Tests
#
#    - name: Upload test results
#      uses: actions/upload-artifact@v4
#      with:
#        name: Stryker.NET App results
#        path: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.App.Tests/StrykerOutput/**/*.html
#      if: ${{ always() }}
#
#  strykerDomain:
#    name: Stryker.NET Domain
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Setup .NET
#      uses: actions/setup-dotnet@v4
#      with:
#        dotnet-version: 9.x
#
#    - name: Restore dependencies
#      run: dotnet restore server/src/StarWarsProgressBarIssueTracker.sln
#
#    - name: Restore tools
#      run: dotnet tool restore
#
#    - name: Execute Stryker.NET
#      run: dotnet stryker
#      working-directory: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.Domain.Tests
#
#    - name: Upload test results
#      uses: actions/upload-artifact@v4
#      with:
#        name: Stryker.NET Domain results
#        path: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.Domain.Tests/StrykerOutput/**/*.html
#      if: ${{ always() }}
#
#  strykerInfrastructure:
#    name: Stryker.NET Infrastructure
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Setup .NET
#      uses: actions/setup-dotnet@v4
#      with:
#        dotnet-version: 9.x
#
#    - name: Restore dependencies
#      run: dotnet restore server/src/StarWarsProgressBarIssueTracker.sln
#
#    - name: Restore tools
#      run: dotnet tool restore
#
#    - name: Execute Stryker.NET
#      run: dotnet stryker
#      working-directory: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.Infrastructure.Tests
#
#    - name: Upload test results
#      uses: actions/upload-artifact@v4
#      with:
#        name: Stryker.NET Infrastructure results
#        path: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.Infrastructure.Tests/StrykerOutput/**/*.html
#      if: ${{ always() }}
#
#  strykerInfrastructureGitlab:
#    name: Stryker.NET Infrastructure Gitlab
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Setup .NET
#      uses: actions/setup-dotnet@v4
#      with:
#        dotnet-version: 9.x
#
#    - name: Restore dependencies
#      run: dotnet restore server/src/StarWarsProgressBarIssueTracker.sln
#
#    - name: Restore tools
#      run: dotnet tool restore
#
#    - name: Execute Stryker.NET
#      run: dotnet stryker
#      working-directory: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab.Tests
#
#    - name: Upload test results
#      uses: actions/upload-artifact@v4
#      with:
#        name: Stryker.NET Infrastructure Gitlab results
#        path: ${{ github.workspace }}/server/src/StarWarsProgressBarIssueTracker.Infrastructure.Gitlab.Tests/StrykerOutput/**/*.html
#      if: ${{ always() }}
#
#    - name: Attach Stryker.NET HTML report to GitHub Actions summary
#      run: |
#        echo "Test Report: [Download HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY
